from rest_framework import throttling
from rest_framework import authentication
from api.datastore import dataStore, using_tokens, valid_token
import logging

logger = logging.getLogger(__name__)


class TokenThrottle(throttling.SimpleRateThrottle):
    """
    Limits the rate of API calls by different amounts for defined user tokens.
    Requests without tokens are not throttled. Any request that has reached the token
    period limit will be throttled. The unique cache key will be generated by concatenating the
    user token of the request.
    """
    cache_format = 'throttle_token_%(token)s'

    def __init__(self):
        # Override the usual SimpleRateThrottle, because we can't determine
        # the rate until called by the view (request).
        pass

    def allow_request(self, request, view):
        # We can only determine the token/rate once we're called by the view.

        # If no tokens were loaded, always allow the request
        if not using_tokens():
            return True

        auth = authentication.get_authorization_header(request).split()

        if auth and len(auth) == 2 and valid_token(auth[1]):
            self.token = auth[1]
        else:
            # If there is no valid token, allow the request so that other throttles can handle it
            self.token = None
            return True

        # Determine the allowed request rate as we normally would during
        # the `__init__` call.
        self.rate = self.get_rate()
        self.num_requests, self.duration = self.parse_rate(self.rate)

        # We can now proceed as normal.
        return super(TokenThrottle, self).allow_request(request, view)

    def get_rate(self):
        return dataStore.api_tokens[self.token]

    def get_cache_key(self, request, view):
        """
        If `token` is not set, don't apply this throttle.

        The unique cache key will be generated by concatenating the
        user token of the request.
        """

        if self.token:
            # only throttle requests which have valid token
            return self.cache_format % {
                'token': self.token,
            }

        return None


class PublicAccessThrottle(throttling.SimpleRateThrottle):
    """
    Limits the rate of API calls that may be made by a anonymous users - requests without a valid token.

    The IP address of the request will be used as the unique cache key.
    """
    scope = 'anon'

    def get_cache_key(self, request, view):

        auth = authentication.get_authorization_header(request).split()

        if auth and len(auth) == 2 and valid_token(auth[1]):
            return None  # Only throttle requests without a valid token

        ident = request.META.get('HTTP_X_FORWARDED_FOR')
        if ident is None:
            ident = request.META.get('REMOTE_ADDR')
        else:
            ident = ''.join(ident.split())

        return self.cache_format % {
            'scope': self.scope,
            'ident': ident
        }
